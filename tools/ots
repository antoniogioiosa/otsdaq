#!/bin/sh

function defineColors ()
{
  # Regular Colors
  Black='\033[0;30m'        # Black
  Red='\033[0;31m'          # Red
  Green='\033[0;32m'        # Green
  Yellow='\033[0;32m'       # \033[0;33m  Yellow -- too hard to see on white (so making green)
  Blue='\033[0;34m'         # Blue
  Purple='\033[0;35m'       # Purple
  Cyan='\033[0;36m'         # Cyan
  White='\033[0;37m'        # White

  # Bold
  BBlack='\033[1;30m'       # Black
  BRed='\033[1;31m'         # Red
  BGreen='\033[1;32m'       # Green
  BYellow='\033[1;33m'      # Yellow
  BBlue='\033[1;34m'        # Blue
  BPurple='\033[1;35m'      # Purple
  BCyan='\033[1;36m'        # Cyan
  BWhite='\033[1;37m'       # White

  # Underline
  UBlack='\033[4;30m'       # Black
  URed='\033[4;31m'         # Red
  UGreen='\033[4;32m'       # Green
  UYellow='\033[4;33m'      # Yellow
  UBlue='\033[4;34m'        # Blue
  UPurple='\033[4;35m'      # Purple
  UCyan='\033[4;36m'        # Cyan
  UWhite='\033[4;37m'       # White

  # Background
  On_Black='\033[40m'       # Black
  On_Red='\033[41m'         # Red
  On_Green='\033[42m'       # Green
  On_Yellow='\033[43m'      # Yellow
  On_Blue='\033[44m'        # Blue
  On_Purple='\033[45m'      # Purple
  On_Cyan='\033[46m'        # Cyan
  On_White='\033[47m'       # White

  # High Intensity
  IBlack='\033[0;90m'       # Black
  IRed='\033[0;91m'         # Red
  IGreen='\033[0;92m'       # Green
  IYellow='\033[0;93m'      # Yellow
  IBlue='\033[0;94m'        # Blue
  IPurple='\033[0;95m'      # Purple
  ICyan='\033[0;96m'        # Cyan
  IWhite='\033[0;97m'       # White

  # Bold High Intensity
  BIBlack='\033[1;90m'      # Black
  BIRed='\033[1;91m'        # Red
  BIGreen='\033[1;92m'      # Green
  BIYellow='\033[1;93m'     # Yellow
  BIBlue='\033[1;94m'       # Blue
  BIPurple='\033[1;95m'     # Purple
  BICyan='\033[1;96m'       # Cyan
  BIWhite='\033[1;97m'      # White

  # High Intensity backgrounds
  On_IBlack='\033[0;100m'   # Black
  On_IRed='\033[0;101m'     # Red
  On_IGreen='\033[0;102m'   # Green
  On_IYellow='\033[0;103m'  # Yellow
  On_IBlue='\033[0;104m'    # Blue
  On_IPurple='\033[0;105m'  # Purple
  On_ICyan='\033[0;106m'    # Cyan
  On_IWhite='\033[0;107m'   # White

  Bold=`tput bold`          # Select bold mode                  
  DIM=`tput dim`            # Select dim (half-bright) mode     
  Blink=`tput blink`        # Select dim (half-bright) mode 
  EUNDERLINE=`tput smul`    # Enable underline mode             
  DUNDERLINE=`tput rmul`    # Disable underline mode            
  REV=`tput rev`            # Turn on reverse video mode        
#Reset=`tput sgr0`         # Reset all
#Reset=`tput init`         # Reset all
  Reset=`tput init;tput sgr0`         # Reset all
  EBold=`tput smso`         # Enter standout (bold) mode        
  DBold=`tput rmso`         # Exit standout mode                
}

#trace helper functions
source $TRACE_BIN/trace_functions.sh

#function toffS () 
#{ 
#	${TRACE_BIN}/trace_cntl lvlclr 0 `bitN_to_mask "$@"` 0
#}

function setupTrace() 
{
	#source /data/ups/setup
	#setup TRACE v3_13_04
	#ups active
	#which trace_cntl
	#type toffS
	
	#for muting trace
	export TRACE_NAME=OTSDAQ_TRACE
	 
	#type toffS
	
	toffS 0-63 -n CONF:OpBase_C
	toffS 0-63 -n CONF:OpLdStr_C
	toffS 0-63 -n CONF:CrtCfD_C
	toffS 0-63 -n COFS:DpFle_C
	toffS 0-63 -n PRVDR:FileDB_C
	toffS 0-63 -n PRVDR:FileDBIX_C
	toffS 0-63 -n JSNU:Document_C
	toffS 0-63 -n JSNU:DocUtils_C
	toffS 0-63 -n CONF:LdStrD_C
	toffS 0-63 -n FileDB:RDWRT_C
	
	${TRACE_BIN}/trace_cntl lvlset 0 0x1f 0	
	
	export TRACE_LIMIT_MS="0,50,50" #unlimited trace messages
	#tinfo #show trace info
}

export TRACE_FILE=/tmp/trace_buffer_${USER}


defineColors
setupTrace
		

echo -e "${Reset}"
echo
echo "  | "
echo "  | "
echo "  | "
echo " _|_"
echo " \ /"
echo "  V "
echo 


HOSTNAME_ARR=($(echo "${HOSTNAME}" | tr '.' " "))
#for i in "${!HOSTNAME_ARR[@]}"
#do
#    echo "$i=>${HOSTNAME_ARR[i]}"
#done
#echo ${HOSTNAME_ARR[0]}
	

STARTTIME=`date +"%h%y.%T"` #to fully ID one StartOTS from another
echo -e "${Reset}${STARTTIME}  <==  ots started on {${HOSTNAME}}"
echo 

echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Green}=========================== ots ============================="

SCRIPT_DIR="$( 
 cd "$(dirname "$(readlink "$0" || printf %s "$0")")"
 pwd -P 
)"
		
unalias ots.exe &>/dev/null 2>&1 #hide output
alias ots.exe='xdaq.exe' &>/dev/null #hide output

#export products, used by artdaq daqInterface
export OTS_PRODUCTS=`echo $PRODUCTS|tr ':' '\n'|grep -v localProducts|head -1`


ISMACROMAKER=0
ISCONFIG=0
QUIET=1
CHROME=0
FIREFOX=0
BACKUPLOGS=0
RELAUNCHCHECK=1
export MACROMAKER_MODE=0

#check for options
if [[ "$1"  == "--macromaker" || "$2"  == "--macromaker" || "$1"  == "-mm" || "$2"  == "-mm"  ]]; then
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t************* ${RED}MACRO-MAKER ONLY MODE!${Reset} ************"
	ISMACROMAKER=1
fi

if [[ "$1"  == "--config" || "$1"  == "--configure" || "$1"  == "--wizard" || "$1"  == "--wiz" || "$1"  == "-w" || "$2"  == "--config" || "$2"  == "--configure" || "$2"  == "--wizard" || "$2"  == "--wiz" || "$2"  == "-w" ]]; then	
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t************* ${RED}WIZ MODE ENABLED!${Reset} *************"      
    ISCONFIG=1
fi

if [[ "$1"  == "--verbose" || "$2"  == "--verbose" || "$1"  == "-v" || "$2"  == "-v"  ]]; then
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t************* ${RED}VERBOSE MODE ENABLED!${Reset} ************"
	QUIET=0
fi

if [[ "$1"  == "--chrome" || "$2"  == "--chrome" || "$1"  == "-c" || "$2"  == "-c"  ]]; then
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t************* ${RED}GOOGLE-CHROME LAUNCH ENABLED!${Reset} ************"
	CHROME=1
fi

if [[ "$1"  == "--firefox" || "$2"  == "--firefox" || "$1"  == "-f" || "$2"  == "-f"  ]]; then
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t************* ${RED}FIREFOX LAUNCH ENABLED!${Reset} ************"
	FIREFOX=1
fi

if [[ "$1"  == "--backup" || "$2"  == "--backup" || "$1"  == "-b" || "$2"  == "-b"  ]]; then
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t************* ${RED}BACKUP LOGS ENABLED!${Reset} ************"
	BACKUPLOGS=1
fi

if [[ "$1"  == "--relaunch" || "$2"  == "--relaunch" || "$1"  == "-r" || "$2"  == "-r"  ]]; then
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t************* ${RED}RELUANCH CHECK ENABLED!${Reset} ************"
	RELAUNCHCHECK=0
fi
#end check for options



if [ "x$OTS_DISABLE_TRACE_DEFAULT" == "x" ]; then
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tSetting up TRACE defaults..."
	
	#=============================
	#Trace setup and helpful commented lines:
	export TRACE_MSGMAX=0 #Activating TRACE
	#echo Turning on all memory tracing via: tonMg 0-63 
	#tonMg 0-63
	
	tonMg 0-4  #enable trace to memory
	tonSg 0-3  #enable trace to slow path (i.e. UDP)
	toffSg 4-64 #apparently not turned off by default?
	
	#enable kernel trace to memory buffer:
	#+test -f /proc/trace/buffer && { export TRACE_FILE=/proc/trace/buffer; tlvls | grep 'KERNEL 0xffffffff00ffffff' >/dev/null || { tonMg 0-63; toffM 24-31 -nKERNEL; }; }
	
	#tlvls #to see what is enabled by name
	#tonS -N DTC* 0-63 #to enable by name
	#tshow | grep DTC #to see memory printouts by name
	
	#end Trace helpful info
	#============================
fi



#############################
#initializing StartOTS action file
#attempt to mkdir for full path so that it exists to move the database to
# assuming mkdir is non-destructive
#Note: quit file added to universally quit StartOTS scripts originating from same USER_DATA
#Note: local path quit file added to universally quit StartOTS scripts originating from same directory (regardless of USER_DATA)
# can not come from action file because individual StartOTS scripts need to respond to that one.
# The gateway supervisor StartOTS script drives the quit file.

OTSDAQ_STARTOTS_ACTION_FILE="${USER_DATA}/ServiceData/StartOTS_action_${HOSTNAME}.cmd" #the targeted hostname action script gives commands to StartOTS scripts running on that host
OTSDAQ_STARTOTS_QUIT_FILE="${USER_DATA}/ServiceData/StartOTS_action_quit.cmd" #the global quit gives exit commonds to the non-gateway StartOTS scripts
OTSDAQ_STARTOTS_LOCAL_QUIT_FILE=".StartOTS_action_quit.cmd" #the local quit is used to remove other StartOTS calls from the same directory (it catches the case when switching USER_DATA paths)

echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tots script path     = ${SCRIPT_DIR}/ots         "
#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tots action path     = ${OTSDAQ_STARTOTS_ACTION_FILE}    "
#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tots quit path       = ${OTSDAQ_STARTOTS_QUIT_FILE}      "
#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tots local quit path = ${OTSDAQ_STARTOTS_LOCAL_QUIT_FILE}"
echo
 
SAP_ARR=$(echo "${USER_DATA}/ServiceData" | tr '/' "\n")
SAP_PATH=""
for SAP_EL in ${SAP_ARR[@]}
do
	#echo $SAP_EL
	SAP_PATH="$SAP_PATH/$SAP_EL"
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t$SAP_PATH"
			
	mkdir -p $SAP_PATH &>/dev/null #hide output
done

#exit any old action loops
echo "EXIT_LOOP" > $OTSDAQ_STARTOTS_ACTION_FILE

#done initializing StartOTS action file
#############################

#############################

function killproc
{
	pid=$1
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Rev}Killing process ID ${pid}${Reset}"
	count=10
	kill -0 ${pid} >/dev/null 2>&1
	while [ $? -eq 0 ]; do
		kill ${pid} >/dev/null 2>&1
		sleep 1
		count=$(( $count - 1 ))
		if [ $count -le 0 ]; then
			kill -9 ${pid} >/dev/null 2>&1
		fi
		
		kill -0 ${pid} >/dev/null 2>&1
	done
}
export -f killproc

#############################
# function to kill all things ots
function killprocs 
{	
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tKilling processes $1..."

	if [[ "x$1" == "x" ]]; then #kill all ots processes
		pids=`ps aux|grep [o]ts.exe|awk '{print $2}'`
		for pid in $pids;do
			killproc $pid
		done
		pids=`ps aux|grep [x]daq.exe|awk '{print $2}'`
		for pid in $pids;do
			killproc $pid
		done
		pids=`ps aux|grep [o]tsConsoleFwd|awk '{print $2}'`
		for pid in $pids;do
			killproc $pid
		done
		pids=`ps aux|grep [m]f_rcv_n_fwd|awk '{print $2}'`
		for pid in $pids;do
			killproc $pid
		done
		
		usershort=`echo $USER|cut -c 1-10`
		for key in `ipcs|grep $usershort|grep ' 0 '|awk '{print $1}'`;do ipcrm -M $key;done

		
	else #then killing only non-gateway contexts

		for contextPID in "${ContextPIDArray[@]}"
		do
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Rev}Killing Non-gateway process ID ${contextPID}${Reset}"
			killproc ${contextPID}

		done
	
		unset ContextPIDArray #done with array of PIDs, so clear
	fi
		
	sleep 1 #give time for cleanup to occur
	
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tDone killing processes $1 ${Reset}"
	
} #end killprocs
export -f killprocs

if [[ "$1"  == "--killall" || "$1"  == "--kill" || "$1"  == "--kx" || "$1"  == "-k" ]]; then

	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Yellow}${Bold}${Rev}******************************************************${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Yellow}${Bold}${Rev}*************       kill otsdaq!        **************${Reset}"
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Yellow}${Bold}${Rev}******************************************************${Reset}"
	
	echo -e "${Reset}"
	
	#try to force kill other StartOTS scripts
	echo "EXIT_LOOP" > $OTSDAQ_STARTOTS_QUIT_FILE
	echo "EXIT_LOOP ${STARTTIME}-${LINENO}-${HOSTNAME_ARR[0]}" > $OTSDAQ_STARTOTS_LOCAL_QUIT_FILE
	
    echo  -e "${IBRed}"
    killprocs	
    
    #now hard kill:
	killall -9 boardreader &>/dev/null 2>&1 #hide output
	killall -9 eventbuilder &>/dev/null 2>&1 #hide output
	killall -9 datalogger &>/dev/null 2>&1 #hide output
	killall -9 dispatcher &>/dev/null 2>&1 #hide output
	killall -9 routing_master &>/dev/null 2>&1 #hide output
	ipcrm -a &>/dev/null 2>&1 #hide output #clean-up shared memory
	
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tDone with ots killall." 
	echo -e "${Reset}"
	echo -e "${Reset}"
	
	#kills self too:
	killall -9 ots &>/dev/null 2>&1 #hide output
	
	exit
fi

if [[ ISMACROMAKER == 0 && $ISCONFIG == 0 && $QUIET == 1 && $CHROME == 0 && $FIREFOX == 0 && $BACKUPLOGS == 0 && $RELAUNCHCHECK == 0 && "$1x" != "x" ]]; then
	echo 
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}${Blink}Unrecognized parameter(s)${Reset} ${BIBlue}$1 $2${Reset} [Note: only two parameters are considered, others are ignored]. "
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${BIGreen}Usage${Reset}:"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t******************************************************"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t*************        ots Usage          **************"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t******************************************************"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo kill all otsdaq running processes, please use any of these options:"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t--killall  --kill  --kx  -k"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t	e.g.: ots --kx"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo start otsdaq in 'wiz mode' please use any of these options:"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t--configure  --config  --wizard  --wiz  -w"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\te.g.: ots --wiz"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo start otsdaq with 'verbose mode' enabled, add one of these options:"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t--verbose  -v"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\te.g.: ots --wiz -v     or    ots --verbose"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo start otsdaq and launch google-chrome, add one of these options:"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t--chrome  -c"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\te.g.: ots --wiz -c     or    ots --chrome"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo start otsdaq and launch firefox, add one of these options:"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t--firefox  -f"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\te.g.: ots --wiz -f     or    ots --firefox"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo backup and not overwrite previous quiet log files, add add one of these options:"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t--backup  -b"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\te.g.: ots -b     or    ots --backup"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tExiting ots. Please see usage tips above."
	echo
	
	echo -e "${Reset}"
	echo -e "${Reset}"
	
	exit
fi

#SERVER=`hostname -f || ifconfig eth0|grep "inet addr"|cut -d":" -f2|awk '{print $1}'`
export SUPERVISOR_SERVER=$HOSTNAME #$SERVER
if [ $ISCONFIG == 1 ]; then
    export OTS_CONFIGURATION_WIZARD_SUPERVISOR_SERVER=$SUPERVISOR_SERVER
fi

#At one point, could be File, Database, DatabaseTest
#  Now,.. artdaq_database expects File, and the ARTDAQ_DATABASE_URI decides the rest
export CONFIGURATION_TYPE=File

# Setup environment when building with MRB
if [ "x$MRB_BUILDDIR" != "x" ] && [ -e $OTSDAQ_DEMO_DIR/CMakeLists.txt ]; then
    export OTSDAQDEMO_BUILD=${MRB_BUILDDIR}/otsdaq_demo
    export OTSDAQ_DEMO_LIB=${MRB_BUILDDIR}/otsdaq_demo/lib
    export OTSDAQDEMO_REPO=$OTSDAQ_DEMO_DIR
    unset  OTSDAQ_DEMO_DIR
fi

if [ "x$MRB_BUILDDIR" != "x" ] && [ -e $OTSDAQ_DIR/CMakeLists.txt ]; then
    export OTSDAQ_BUILD=${MRB_BUILDDIR}/otsdaq
    export OTSDAQ_LIB=${MRB_BUILDDIR}/otsdaq/lib
    export OTSDAQ_REPO=$OTSDAQ_DIR
    export FHICL_FILE_PATH=.:$OTSDAQ_REPO/tools/fcl:$FHICL_FILE_PATH
fi
  
if [ "x$MRB_BUILDDIR" != "x" ] && [ -e $OTSDAQ_UTILITIES_DIR/CMakeLists.txt ]; then
    export OTSDAQUTILITIES_BUILD=${MRB_BUILDDIR}/otsdaq_utilities
    export OTSDAQ_UTILITIES_LIB=${MRB_BUILDDIR}/otsdaq_utilities/lib
    export OTSDAQUTILITIES_REPO=$OTSDAQ_UTILITIES_DIR
fi

if [ "x$OTSDAQ_DEMO_DIR" == "x" ]; then
    export OTSDAQ_DEMO_DIR=$OTSDAQDEMO_BUILD
fi

if [ "x$USER_WEB_PATH" == "x" ]; then  #setup the location for user web-apps
    export USER_WEB_PATH=$OTSDAQ_DEMO_DIR/UserWebGUI 
fi

#setup web path as XDAQ is setup.. 
#then make a link to user specified web path.
WEB_PATH=${OTSDAQ_UTILITIES_DIR}/WebGUI
#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tWEB_PATH=$WEB_PATH"
#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tUSER_WEB_PATH=$USER_WEB_PATH"
#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tMaking symbolic link to USER_WEB_PATH"
#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tln -s $USER_WEB_PATH $WEB_PATH/UserWebPath"
rm $WEB_PATH/UserWebPath &>/dev/null  #delete link first, hide output
ln -s $USER_WEB_PATH $WEB_PATH/UserWebPath &>/dev/null  #make link, hide output


if [ "x$USER_DATA" == "x" ]; then
    echo
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}${Blink}Fatal Error${Reset}."
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tEnvironment variable ${Cyan}${Bold}USER_DATAr${Reset} has not been setup!"
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo setup, use 'export USER_DATA=<path to user data>'"
    echo
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t(If you do not have a user data folder copy '<path to ots source>/otsdaq-demo/Data' as your starting point.)"
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}${Blink}Aborting launch${Reset} "
    echo
    
    echo -e "${Reset}"
    echo -e "${Reset}"
    exit    
fi

if [ ! -d $USER_DATA ]; then
    echo
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}${Blink}Fatal Error${Reset}."
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tUSER_DATA=$USER_DATA"
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tEnvironment variable ${Cyan}${Bold}USER_DATA${Reset} does not point to a valid directory!"
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo setup, use 'export USER_DATA=<path to user data>'"
    echo 
    echo
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t(If you do not have a user data folder copy '<path to ots source>/otsdaq-demo/Data' as your starting point.)"
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}${Blink}Aborting launch${Reset} "
    echo
    
    echo -e "${Reset}"
    echo -e "${Reset}"
    exit   
fi

#print out important environment variables
echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\$USER_DATA               = ${YELLOW}${USER_DATA}${Reset}          "
echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\$ARTDAQ_DATABASE_URI     = ${YELLOW}${Bold}${ARTDAQ_DATABASE_URI}${DBold}${Reset}"
echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\$OTSDAQ_DATA             = ${YELLOW}${OTSDAQ_DATA}${Reset}        "
#end print out important environment variables

echo
echo

#check for antiquated artdaq database
ARTDAQ_DATABASE_TYPE=`echo ${ARTDAQ_DATABASE_URI}|sed 's|:.*||'`

#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tDatabase type = $ARTDAQ_DATABASE_TYPE"
	    
#if not using filesystem point to a db "services" folder
if [ $ARTDAQ_DATABASE_TYPE == "filesystemdb" ]; then


	#basic philosophy:
	#	use this section to up data user data and databases
	#	after update, save a file
	#	check for that file's existence before doing update procedure

	ARTDAQ_DATABASE_FILESYSTEM_PATH=`echo ${ARTDAQ_DATABASE_URI}|sed 's|.*//|/|'`

	if [ ! -e ${ARTDAQ_DATABASE_FILESYSTEM_PATH}/fromIndexRebuild ]; then
	    # Rebuild ARTDAQ_DATABASE indicies
	    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tRebuilding database indices..."
	    rebuild_database_index >/dev/null 2>&1; rebuild_database_index --uri=${ARTDAQ_DATABASE_URI} >/dev/null 2>&1
	    
	    mv ${ARTDAQ_DATABASE_FILESYSTEM_PATH} ${ARTDAQ_DATABASE_FILESYSTEM_PATH}.bak.$$		
	    mv ${ARTDAQ_DATABASE_FILESYSTEM_PATH}_new ${ARTDAQ_DATABASE_FILESYSTEM_PATH}
	    echo "rebuilt" > ${ARTDAQ_DATABASE_FILESYSTEM_PATH}/fromIndexRebuild
	    #else
	    #	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${ARTDAQ_DATABASE_FILESYSTEM_PATH}/fromIndexRebuild file exists, so not rebuilding indices."
	fi

	if [ ! -e ${USER_DATA}/ServiceData/.updateDB_nov9_2019a.cmd ]; then	
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tUpdating DB to comply with November 2019 changes..."		
		otsdaq_beautify_artdaq_tables		
		echo "done" > ${USER_DATA}/ServiceData/.updateDB_nov9_2019a.cmd	
	fi

	#check for somewhat-antiquated(pre-configuration-to-table) artdaq database
	if [ ! -e ${ARTDAQ_DATABASE_FILESYSTEM_PATH}/fromConfigurationToTableConversion2 ]; then
	    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tConverting configuration to table for user data and databases..."
	    
	    #backup because we are scared
	    cp -r ${ARTDAQ_DATABASE_FILESYSTEM_PATH} ${ARTDAQ_DATABASE_FILESYSTEM_PATH}bk12345
	    cp -r ${USER_DATA} ${USER_DATA}bk12345
	    
	    otsdaq_convert_config_to_table	
	    echo "converted" > ${ARTDAQ_DATABASE_FILESYSTEM_PATH}/fromConfigurationToTableConversion2
	    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tConversion complete. You must run wiz mode once now to activate the configuration changes."
	    
	    if [ $ISCONFIG == 0 ]; then		
			echo -e "${Reset}"
			echo -e "${Reset}"	
			exit
	    fi
	fi
	if [ -d ${USER_DATA}/ConfigurationInfo ]; then
	    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tConverting configuration to table for user data and databases..."
	    
	    #backup because we are scared
	    cp -r ${ARTDAQ_DATABASE_FILESYSTEM_PATH} ${ARTDAQ_DATABASE_FILESYSTEM_PATH}bk12345
	    cp -r ${USER_DATA} ${USER_DATA}bk12345
	    
	    otsdaq_convert_config_to_table
	    echo "converted" > ${ARTDAQ_DATABASE_FILESYSTEM_PATH}/fromConfigurationToTableConversion
	    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tConversion complete. You must run wiz mode once now to activate the configuration changes."
	    
	    if [ $ISCONFIG == 0 ]; then		
			echo -e "${Reset}"
			echo -e "${Reset}"
			exit
	    fi
	fi
else
	ARTDAQ_DATABASE_FILESYSTEM_PATH=${USER_DATA}/ServiceData/artdaq_database_services
	mkdir $ARTDAQ_DATABASE_FILESYSTEM_PATH &>/dev/null 2>&1 #hide output
fi	
		






#check for somewhat-antiquated artdaq 'DAQ' tables and auto-fix
if [ ! -e ${ARTDAQ_DATABASE_FILESYSTEM_PATH}/artdaqDaqTableConversion ]; then
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tConverting artdaq 'daq' tables in databases..."
    
    #backup because we are scared
    cp -r ${ARTDAQ_DATABASE_FILESYSTEM_PATH} ${ARTDAQ_DATABASE_FILESYSTEM_PATH}bk12346
    cp -r ${USER_DATA} ${USER_DATA}bk12346
    
    otsdaq_convert_artdaq_daq_tables
    echo "converted" > ${ARTDAQ_DATABASE_FILESYSTEM_PATH}/artdaqDaqTableConversion
    echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tConversion complete. You must run wiz mode once now to activate the configuration changes."
    
    if [ $ISCONFIG == 0 ]; then		
		echo -e "${Reset}"
		echo -e "${Reset}"	
		exit
    fi
fi

export TABLE_INFO_PATH=${USER_DATA}/TableInfo
export SERVICE_DATA_PATH=${USER_DATA}/ServiceData
export XDAQ_CONFIGURATION_DATA_PATH=${USER_DATA}/XDAQConfigurations
export LOGIN_DATA_PATH=${USER_DATA}/ServiceData/LoginData
export LOGBOOK_DATA_PATH=${USER_DATA}/ServiceData/LogbookData
export PROGRESS_BAR_DATA_PATH=${USER_DATA}/ServiceData/ProgressBarData
export ROOT_DISPLAY_CONFIG_PATH=${USER_DATA}/RootDisplayConfigData

if [ "x$OTSDAQ_DATA" == "x" ];then
    export OTSDAQ_DATA=/tmp
fi

#make directory if it does not exist
mkdir -p ${OTSDAQ_DATA} || echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tError: OTSDAQ_DATA path (${OTSDAQ_DATA}) does not exist and mkdir failed!"

if [ "x$ROOT_BROWSER_PATH" == "x" ];then
    export ROOT_BROWSER_PATH=${OTSDAQ_DATA}
fi

if [ "x$OTSDAQ_LOG_DIR" == "x" ];then
    export OTSDAQ_LOG_DIR="${USER_DATA}/Logs"
fi

if [ "x${ARTDAQ_OUTPUT_DIR}" == "x" ]; then
    export ARTDAQ_OUTPUT_DIR="${USER_DATA}/ArtdaqData"
fi

if [ ! -d $ARTDAQ_OUTPUT_DIR ]; then
	if [ ! -L $ARTDAQ_OUTPUT_DIR ]; then
	    mkdir -p $ARTDAQ_OUTPUT_DIR
	else
		mkdir -p `readlink -f $ARTDAQ_OUTPUT_DIR`
	fi
fi

if [ ! -d $OTSDAQ_LOG_DIR ]; then
	if [ ! -L $OTSDAQ_LOG_DIR ]; then
	    mkdir -p $OTSDAQ_LOG_DIR
	else
		mkdir -p `readlink -f $OTSDAQ_LOG_DIR`
	fi
fi
export OTSDAQ_LOG_ROOT=$OTSDAQ_LOG_DIR


if [ ! -d ${USER_DATA}/MessageFacilityConfigurations ];then
	if [ ! -L ${USER_DATA}/MessageFacilityConfigurations ]; then
		mkdir -p ${USER_DATA}/MessageFacilityConfigurations
	else
		mkdir -p `readlink -f ${USER_DATA}/MessageFacilityConfigurations`
	fi
fi

##############################################################################
export XDAQ_CONFIGURATION_XML=otsConfiguration_CMake_Run #-> 
##############################################################################


#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tARTDAQ_MFEXTENSIONS_DIR=" ${ARTDAQ_MFEXTENSIONS_DIR}

#at end print out connection instructions using MAIN_URL
MAIN_URL="unknown_url"
MPI_RUN_CMD=""

	
#declare launch functions


####################################################################
####################################################################
################## MacroMaker Mode OTS Launch ######################
####################################################################
####################################################################
#make URL print out a function so that & syntax can be used to run in background (user has immediate terminal access)
launchOTSMacromaker() {	
	
	#kill all things otsdaq, before launching new things	
	killprocs
	
	#cleanup alive files
	rm ${OTSDAQ_LOG_DIR}/otsdaq_is_alive* &>/dev/null 2>&1 #hide output #remove alive file


	echo 
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Blue}${REV}                                                       ${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Blue}${REV} ***************************************************** ${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Blue}${REV} *******  Launching ots in MacroMaker MODE!  ********* ${Reset}"	
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Blue}${REV} ***************************************************** ${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Blue}${REV}                                                       ${Reset}"
	echo
		
	
	export MACROMAKER_MODE=1
	
	#assume verbose requires extra -v option
	if [ $QUIET == 1 ]; then
	
		if [[ "x$2" = "x" ]]; then
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tError! Must specify fcl file path parameter for Macro Maker mode!${Reset}"
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tExample Macro Maker mode usage:"
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\tots -mm srcs/otsdaq/tools/fcl/MacroMakerModeExample.fcl"
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo get started, copy the example FHiCL configuration file here: ${OTSDAQ_DIR}/tools/fcl/MacroMakerModeExample.fcl"
			
			exit
		fi
	
		if [[ "$2" = /* ]]; then #absolute path
			export CONFIGURATION_INIT_FCL=$2
		else
			export CONFIGURATION_INIT_FCL="${PWD}/$2"
		fi
	else
	
		if [[ "x$3" = "x" ]]; then
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tError! Must specify fcl file path parameter for Macro Maker mode!${Reset}"
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tExample Macro Maker mode usage:"
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\tots -mm srcs/otsdaq/tools/fcl/MacroMakerModeExample.fcl"
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tTo get started, copy the example FHiCL configuration file here: ${OTSDAQ_DIR}/tools/fcl/MacroMakerModeExample.fcl"
			
			exit
		fi
		
		if [[ "$3" = /* ]]; then #absolute path
			export CONFIGURATION_INIT_FCL=$3
		else
			export CONFIGURATION_INIT_FCL="${PWD}/$3"
		fi
	fi
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tCONFIGURATION_INIT_FCL = ${CONFIGURATION_INIT_FCL}"
	
	#setup wiz mode environment variables
	export FE_SUPERVISOR_ID=280
	export MACROMAKER_SUPERVISOR_ID=290
	MAIN_PORT=2015

	if [ "x$OTS_MAIN_PORT" != "x" ]; then
	  MAIN_PORT=${OTS_MAIN_PORT}
	elif [ $USER == rrivera ]; then
	  MAIN_PORT=1983
	elif [ $USER == lukhanin ]; then
	  MAIN_PORT=2060
	elif [ $USER == uplegger ]; then
	  MAIN_PORT=1974
	elif [ $USER == parilla ]; then
	   MAIN_PORT=9000
	elif [ $USER == eflumerf ]; then
	   MAIN_PORT=1987
	elif [ $USER == swu ]; then
	   MAIN_PORT=1994
	elif [ $USER == rrivera ]; then
	   MAIN_PORT=1776
	elif [ $USER == naodell ]; then
	   MAIN_PORT=2030
	elif [ $USER == bschneid ]; then
	   MAIN_PORT=2050
	fi
	export PORT=${MAIN_PORT}	
	
	
	#check for mm xml file, if missing download it	
	if [ ! -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake.xml ]; then
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tDownloading MacroMaker mode context configuration..."
		wget https://cdcvs.fnal.gov/redmine/projects/otsdaq/repository/revisions/develop/raw/data-core/XDAQConfigurations/otsConfiguration_MacroMaker_CMake.xml -P ${XDAQ_CONFIGURATION_DATA_PATH} --no-check-certificate	
	fi
	
	#check for message facility file, if missing download it	
	if [ ! -e ${USER_DATA}/MessageFacilityConfigurations/MessageFacilityWithCout.fcl ]; then
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tDownloading MacroMaker mode context configuration..."
		wget https://cdcvs.fnal.gov/redmine/projects/otsdaq/repository/revisions/develop/raw/data-core/MessageFacilityConfigurations/MessageFacilityWithCout.fcl -P ${USER_DATA}/MessageFacilityConfigurations --no-check-certificate	
	fi
	
		
	#substitute environment variables into template wiz-mode xdaq config xml
	envsubst <${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake.xml > ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake_Run.xml
	
	#use safe Message Facility fcl in config mode
	export OTSDAQ_LOG_FHICL=${USER_DATA}/MessageFacilityConfigurations/MessageFacilityWithCout.fcl
	
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tStarting MacroMaker mode on port ${PORT}; to change, please setup environment variable OTS_MAIN_PORT."
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tMacroMaker mode ots context is defined by ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake_Run.xml"

	#attempt to avoid false starts by xdaq by detecting constructor, and relaunching
	rm ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat >/dev/null 2>&1 #hide output #remove alive file
		
	if [ $QUIET == 1 ]; then
		echo

		if [ $BACKUPLOGS == 1 ]; then
			DATESTRING=`date +'%s'`
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t     Backing up logfile to *** ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.${DATESTRING}.txt ***"
			mv ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.txt ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.${DATESTRING}.txt
		fi
		
		echo
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}MacroMaker Mode${Reset}' output into ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.txt ***  "
		echo "ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake_Run.xml &> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.txt &"
		ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake_Run.xml &> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.txt &
	else
		ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake_Run.xml &
	fi
	LAST_OTS_PID=$!
	
	if [ $RELAUNCHCHECK == 1 ]; then
	
		#test for relaunch
		# 4 times quietly, then get louder
		
		OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tOTS_IS_ALIVE=${OTS_IS_ALIVE}"

		if [ "x$OTS_IS_ALIVE" == "x" ]; then		
			sleep 1
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		fi	
		if [ "x$OTS_IS_ALIVE" == "x" ]; then		
			sleep 1
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		fi	
		if [ "x$OTS_IS_ALIVE" == "x" ]; then		
			sleep 1
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		fi	
		if [ "x$OTS_IS_ALIVE" == "x" ]; then		
			sleep 1
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		fi	
		
		while [ "x$OTS_IS_ALIVE" == "x" ]; do
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tCould not verify successful ots Macro Maker mode context launch, relaunching ots Macro Maker mode context..."									
			killproc ${LAST_OTS_PID} 	
			sleep 2
			
			if [ $QUIET == 1 ]; then
				echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}MacroMaker Mode${Reset}' output into ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.txt ***  "
				echo -e "\n\nAttempting restart\n\n" >> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.txt
				ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake_Run.xml &>> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mm-${HOSTNAME}.txt &
			else
				ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_MacroMaker_CMake_Run.xml &
			fi
			LAST_OTS_PID=$!
			
			#verify relaunch
			sleep 8 #give time before relaunch test
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat)"
			
		done
		
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tVerified successful ots Macro Maker mode context ${HOSTNAME}-${PORT} launch..."
	fi
	
	MAIN_URL="http://${HOSTNAME}:${PORT}/urn:xdaq-application:lid=$MACROMAKER_SUPERVISOR_ID/Verify?code=$(cat ${SERVICE_DATA_PATH}//OtsWizardData/sequence.out)"
	

	echo -e "${Reset}"
	echo -e "${Reset}"	
	
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\tots Macro Maker access code = $(cat ${SERVICE_DATA_PATH}//OtsWizardData/sequence.out)"
	
	printMainURL &
	
	
} #end launchOTSMacromaker
export -f launchOTSMacromaker

####################################################################
####################################################################
################## Wiz Mode OTS Launch ###########################
####################################################################
####################################################################
#make URL print out a function so that & syntax can be used to run in background (user has immediate terminal access)
launchOTSWiz() {	
	
	#kill all things otsdaq, before launching new things	
	killprocs
	
	#cleanup alive files
	rm ${OTSDAQ_LOG_DIR}/otsdaq_is_alive* &>/dev/null 2>&1 #hide output #remove alive file



	echo 
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${REV}                                                       ${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${REV} ***************************************************** ${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${REV} ***********  Launching ots in WIZ MODE!  ************ ${Reset}"	
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${REV} ***************************************************** ${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${REV}                                                       ${Reset}"
	echo
		
	#setup wiz mode environment variables
	export CODE_EDITOR_SUPERVISOR_ID=240
	export CONSOLE_SUPERVISOR_ID=260
	export CONFIGURATION_GUI_SUPERVISOR_ID=280
	export WIZARD_SUPERVISOR_ID=290	
	export OTS_CONFIGURATION_WIZARD_SUPERVISOR_ID=290	
	MAIN_PORT=2015

	if [ "x$OTS_WIZ_MODE_MAIN_PORT" != "x" ]; then
	  MAIN_PORT=${OTS_WIZ_MODE_MAIN_PORT}
	elif [ "x$OTS_MAIN_PORT" != "x" ]; then
	  MAIN_PORT=${OTS_MAIN_PORT}
	elif [ $USER == rrivera ]; then
	  MAIN_PORT=1983
	elif [ $USER == lukhanin ]; then
	  MAIN_PORT=2060
	elif [ $USER == uplegger ]; then
	  MAIN_PORT=1974
	elif [ $USER == parilla ]; then
	   MAIN_PORT=9000
	elif [ $USER == eflumerf ]; then
	   MAIN_PORT=1987
	elif [ $USER == swu ]; then
	   MAIN_PORT=1994
	elif [ $USER == rrivera ]; then
	   MAIN_PORT=1776
	elif [ $USER == naodell ]; then
	   MAIN_PORT=2030
	elif [ $USER == bschneid ]; then
	   MAIN_PORT=2050
	fi
	export PORT=${MAIN_PORT}	
	
	
	
	####################################################################
	########### start console & message facility handling ##############
	####################################################################
	#decide which MessageFacility console viewer to run
	# and configure otsdaq MF library with MessageFacility*.fcl to use

	#use safe Message Facility fcl in wiz mode
	
	#modify the port to avoid wiz mode conflicts
	cp ${USER_DATA}/MessageFacilityConfigurations/MessageFacility.fcl ${USER_DATA}/MessageFacilityConfigurations/MessageFacilityWiz.fcl 
	PORTMFOFF=$((30000 + $PORT))
	sed -i s/30000/${PORTMFOFF}/g ${USER_DATA}/MessageFacilityConfigurations/MessageFacilityWiz.fcl 
	
	export OTSDAQ_LOG_FHICL=${USER_DATA}/MessageFacilityConfigurations/MessageFacilityWiz.fcl 

	#this fcl tells the MF library used by ots source how to behave
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tOTSDAQ_LOG_FHICL=" ${OTSDAQ_LOG_FHICL}
	
	
	USE_WEB_VIEWER="$(cat ${USER_DATA}/MessageFacilityConfigurations/UseWebConsole.bool)"
	USE_QT_VIEWER="$(cat ${USER_DATA}/MessageFacilityConfigurations/UseQTViewer.bool)"
			
	
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tUSE_WEB_VIEWER" ${USE_WEB_VIEWER}
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tUSE_QT_VIEWER" ${USE_QT_VIEWER}
	
	
	if [[ $USE_WEB_VIEWER == "1" ]]; then
		#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tCONSOLE: Using web console viewer"
		
		#start quiet forwarder with wiz receiving port and destination port parameter file
		cp ${USER_DATA}/MessageFacilityConfigurations/QuietForwarderWiz.cfg ${USER_DATA}/MessageFacilityConfigurations/QuietForwarder.cfg
		
		#modify the port to avoid wiz mode conflicts
		PORTMFOFF1=$((30001 + $PORT)) #make port + 1
		sed -i s/30001/${PORTMFOFF1}/g ${USER_DATA}/MessageFacilityConfigurations/QuietForwarder.cfg
		sed -i s/30000/${PORTMFOFF}/g ${USER_DATA}/MessageFacilityConfigurations/QuietForwarder.cfg
		
		#RAR nov 2019 -- always send forwarder to file (with new trace, verbose mode is handled by trace, no need to printout twice)
		#if [ $QUIET == 1 ]; then

			if [ $BACKUPLOGS == 1 ]; then
				DATESTRING=`date +'%s'`
				echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t     Backing up logfile to ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.${DATESTRING}.txt${Reset}"
				mv ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.txt ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.${DATESTRING}.txt
			fi
			
			#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}Message Facility${Reset}' output into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.txt${Reset}"
			otsConsoleFwd ${USER_DATA}/MessageFacilityConfigurations/QuietForwarder.cfg  &> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.txt &
		#else
		#	otsConsoleFwd ${USER_DATA}/MessageFacilityConfigurations/QuietForwarder.cfg  &
		#fi		 	 	
		echo	
	fi
	
	if [[ $USE_QT_VIEWER == "1" ]]; then
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tCONSOLE: Using QT console viewer"
		if [ "x$ARTDAQ_MFEXTENSIONS_DIR" == "x" ]; then #qtviewer library missing!
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tError: ARTDAQ_MFEXTENSIONS_DIR missing for qtviewer!"
			echo
			
			echo -e "${Reset}"
			echo -e "${Reset}"
			exit
		fi
		
		#start the QT Viewer (only if it is not already started)
		if [ $( ps aux|egrep -c $USER.*msgviewer ) -eq 1 ]; then				
			msgviewer -c ${USER_DATA}/MessageFacilityConfigurations/QTMessageViewerGen.fcl  &
			sleep 2	 #give time for msgviewer to be ready for messages	
		fi		
	fi
	
	####################################################################
	########### end console & message facility handling ################
	####################################################################
	
	
	
	
		
	#substitute environment variables into template wiz-mode xdaq config xml
	envsubst <${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_Wizard_CMake.xml > ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_Wizard_CMake_Run.xml
	
	
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tStarting wiz mode on port ${PORT}; to change, please setup environment variable OTS_WIZ_MODE_MAIN_PORT."
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tWiz mode ots context is defined by ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_Wizard_CMake_Run.xml"

	#attempt to avoid false starts by xdaq by detecting constructor, and relaunching
	rm ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat >/dev/null 2>&1 #hide output #remove alive file
		
	if [ $QUIET == 1 ]; then
		echo

		if [ $BACKUPLOGS == 1 ]; then
			DATESTRING=`date +'%s'`
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t     Backing up logfile to *** ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-wiz-${HOSTNAME}.${DATESTRING}.txt ***"
			mv ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-wiz-${HOSTNAME}.txt ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-wiz-${HOSTNAME}.${DATESTRING}.txt
		fi
		
		echo
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}Wiz Mode${Reset}' output into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-wiz-${HOSTNAME}.txt${Reset}"
		ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_Wizard_CMake_Run.xml &> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-wiz-${HOSTNAME}.txt &
	else
		ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_Wizard_CMake_Run.xml &
	fi
	LAST_OTS_PID=$!

	if [ $RELAUNCHCHECK == 1 ]; then
		
		#test for relaunch
		# 4 times quietly, then get louder
		OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		
		if [ "x$OTS_IS_ALIVE" == "x" ]; then		
			sleep 1
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		fi
		if [ "x$OTS_IS_ALIVE" == "x" ]; then		
			sleep 1
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		fi
		if [ "x$OTS_IS_ALIVE" == "x" ]; then		
			sleep 1
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		fi
		if [ "x$OTS_IS_ALIVE" == "x" ]; then		
			sleep 1
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat 2>/dev/null)"  #hide error output
		fi
		
		#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tOTS_IS_ALIVE=${OTS_IS_ALIVE}"
	
		while [ "x$OTS_IS_ALIVE" == "x" ]; do
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tCould not verify successful ots wiz context launch, relaunching ots wiz context..."			
			killproc ${LAST_OTS_PID} 
			sleep 2
			
			if [ $QUIET == 1 ]; then
				echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}Wiz Mode${Reset}' output into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-wiz-${HOSTNAME}.txt${Reset}"
				echo -e "\n\nAttempting restart\n\n" >> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-wiz-${HOSTNAME}.txt
				ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_Wizard_CMake_Run.xml &>> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-wiz-${HOSTNAME}.txt &
			else
				ots.exe -p ${PORT} -h ${HOSTNAME} -e ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_Wizard_CMake_Run.xml &
			fi
			LAST_OTS_PID=$!
			
			#test for relaunch
			sleep 8 #give time before relaunch test
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-wiz-0.dat)"
	
		done
		
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tVerified successful ots wiz context launch..."
	fi
	
	################
	# start node db server
	
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tARTDAQ_UTILITIES_DIR=" ${ARTDAQ_UTILITIES_DIR}
	#cd $ARTDAQ_UTILITIES_DIR/node.js
	#as root, once...
	# chmod +x setupNodeServer.sh 
	# ./setupNodeServer.sh 
	# chown -R products:products *
	
	#uncomment to use artdaq db nodejs web gui
	#node serverbase.js > /tmp/${USER}_serverbase.log &
	
	MAIN_URL="http://${HOSTNAME}:${PORT}/urn:xdaq-application:lid=$WIZARD_SUPERVISOR_ID/Verify?code=$(cat ${SERVICE_DATA_PATH}//OtsWizardData/sequence.out)"
	
	echo -e "${Reset}"
	echo -e "${Reset}"	
	
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\tots Wiz Mode access code = $(cat ${SERVICE_DATA_PATH}//OtsWizardData/sequence.out)"

	printMainURL &
	
} #end launchOTSWiz
export -f launchOTSWiz
		
####################################################################
####################################################################
################## Normal Mode OTS Launch ##########################
####################################################################
####################################################################
#make URL print out a function so that & syntax can be used to run in background (user has immediate terminal access)
#ContextPIDArray is context PID array 
launchOTS() {
	
	ISGATEWAYLAUNCH=1
	if [ "x$1" != "x" ]; then #if parameter, then is nongateway launch
		ISGATEWAYLAUNCH=0
		killprocs nongateway
		
		unset TempContextPIDArray 
		unset ContextPIDArray 
		unset xdaqPort
		unset xdaqHost
		unset xdaqContextUID	
		
		#if [ $BACKUPLOGS == 0 ]; then
			
			#could do something.. but do not delete all Logs!
			
			#cleanup log files
			#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tCleaning LOG files at ${OTSDAQ_LOG_DIR} ${Reset}"
			#rm -rf ${OTSDAQ_LOG_DIR}/* &>/dev/null 2>&1 #hide output #remove alive file
		#fi
		
		
	else 					#else is full gateway and nongateway launch
		GATEWAY_PID=-1
		#kill all things otsdaq, before launching new things	
		killprocs
	fi
	
	echo 
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Purple}${REV}                                                       ${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Purple}${REV} ***************************************************** ${Reset}"
	if [ $ISGATEWAYLAUNCH == 1 ]; then
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Purple}${REV} ***********       Launching ots!         ************ ${Reset}"
	else
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Purple}${REV} *******    Launching ots Non-gateway Apps!    ******* ${Reset}"
	fi
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Purple}${REV} ***************************************************** ${Reset}"
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Purple}${REV}                                                       ${Reset}"
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tXDAQ Configuration XML   = ${XDAQ_CONFIGURATION_DATA_PATH}/${XDAQ_CONFIGURATION_XML}.xml"	
	
	####################################################################
	########### start console & message facility handling ##############
	####################################################################
	#decide which MessageFacility console viewer to run
	# and configure otsdaq MF library with MessageFacility*.fcl to use
	
	export OTSDAQ_LOG_FHICL=${USER_DATA}/MessageFacilityConfigurations/MessageFacilityGen.fcl
	#this fcl tells the MF library used by ots source how to behave
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tOTSDAQ_LOG_FHICL=" ${OTSDAQ_LOG_FHICL}
	
	
	if [[ $ISGATEWAYLAUNCH == 1 ]]; then
		USE_WEB_VIEWER="$(cat ${USER_DATA}/MessageFacilityConfigurations/UseWebConsole.bool)"
		USE_QT_VIEWER="$(cat ${USER_DATA}/MessageFacilityConfigurations/UseQTViewer.bool)"
				
		
		#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tUSE_WEB_VIEWER" ${USE_WEB_VIEWER}
		#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tUSE_QT_VIEWER" ${USE_QT_VIEWER}
		
		
		if [[ $USE_WEB_VIEWER == "1" ]]; then
                        echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Green}${Bold}Launching message facility web console assistant...${Reset}"
			
			#start quiet forwarder with receiving port and destination port parameter file
			cp ${USER_DATA}/MessageFacilityConfigurations/QuietForwarderGen.cfg ${USER_DATA}/MessageFacilityConfigurations/QuietForwarder.cfg
			
			#RAR nov 2019 -- always send forwarder to file (with new trace, verbose mode is handled by trace, no need to printout twice)
			#if [[ $QUIET == 1 ]]; then

				if [ $BACKUPLOGS == 1 ]; then
					DATESTRING=`date +'%s'`
					echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tBacking up logfile into ${Yellow}${Bold}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.${DATESTRING}.txt${Reset}"
					mv ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.txt ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.${DATESTRING}.txt
				fi
				
				#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}Message Facility${Reset}' output into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.txt${Reset}"
				otsConsoleFwd ${USER_DATA}/MessageFacilityConfigurations/QuietForwarder.cfg  &> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-mf-${HOSTNAME}.txt &
			#else
			#	otsConsoleFwd ${USER_DATA}/MessageFacilityConfigurations/QuietForwarder.cfg  &
			#fi		 	
			echo
		fi
		
		if [[ $USE_QT_VIEWER == "1" ]]; then
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Green}${Bold}Launching QT console viewer...${Reset}"
			if [ "x$ARTDAQ_MFEXTENSIONS_DIR" == "x" ]; then #qtviewer library missing!
				echo
				echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Error${Reset}: ARTDAQ_MFEXTENSIONS_DIR missing for qtviewer!${Reset}"
				echo
				exit
			fi
			
			#start the QT Viewer (only if it is not already started)
			if [ $( ps aux|egrep -c $USER.*msgviewer ) -eq 1 ]; then				
				msgviewer -c ${USER_DATA}/MessageFacilityConfigurations/QTMessageViewerGen.fcl  &
				sleep 2	 #give time for msgviewer to be ready for messages			
			fi		
		fi
	fi
	
	####################################################################
	########### end console & message facility handling ################
	####################################################################
	
	####################################################################
	######################## setup DAQInterface ########################
	####################################################################

	export DAQINTERFACE_PROCESS_MANAGEMENT_METHOD="direct"
	export DAQINTERFACE_FHICL_DIRECTORY=$USER_DATA/ARTDAQConfigurations
	export DAQINTERFACE_KNOWN_BOARDREADERS_LIST=$USER_DATA/ARTDAQConfigurations/known_boardreaders_list

	# Make sure fhicl directory exists
	if ! [ -d $DAQINTERFACE_FHICL_DIRECTORY ]; then
	     if [ ! -L ${DAQINTERFACE_FHICL_DIRECTORY} ]; then
                mkdir -p ${DAQINTERFACE_FHICL_DIRECTORY}
             else
                mkdir -p `readlink -f ${DAQINTERFACE_FHICL_DIRECTORY}`
             fi
	fi
	
	# Create a dummy boardreaders list. 
	# ots will set the components directly, and will not use this file, but DAQInterface requires it to be present.
	if ! [ -e $DAQINTERFACE_KNOWN_BOARDREADERS_LIST ]; then
		echo "component01 localhost" >$DAQINTERFACE_KNOWN_BOARDREADERS_LIST
	fi

	export DAQINTERFACE_SETTINGS=$USER_DATA/ARTDAQConfigurations/daqinterface_settings
	export DAQINTERFACE_USER_SOURCEFILE="IGNORED"
	source $ARTDAQ_DAQINTERFACE_DIR/source_me > /dev/null #hide std output but show errors
	export DAQINTERFACE_SETUP_FHICLCPP=$USER_DATA/ARTDAQConfigurations/.setup_fhiclcpp
			
	####################################################################
	###################### end DAQInterface setup ######################
	####################################################################

	envString="-genv OTSDAQ_LOG_ROOT ${OTSDAQ_LOG_DIR} -genv ARTDAQ_OUTPUT_DIR ${ARTDAQ_OUTPUT_DIR}"

	#create argument to pass to xdaq executable
	export XDAQ_ARGS="${XDAQ_CONFIGURATION_DATA_PATH}/otsConfiguration_CMake.xml -c ${XDAQ_CONFIGURATION_DATA_PATH}/${XDAQ_CONFIGURATION_XML}.xml"
	
	#echo
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tXDAQ ARGS PASSED TO ots.exe:${Reset}"
	#echo ${XDAQ_ARGS}
	#echo
	#echo	
			


	#for Supervisor backwards compatibility, convert to GatewaySupervisor stealthily
	#sed -i s/ots::Supervisor/ots::GatewaySupervisor/g ${XDAQ_CONFIGURATION_DATA_PATH}/${XDAQ_CONFIGURATION_XML}.xml
	#sed -i s/libSupervisor\.so/libGatewaySupervisor\.so/g ${XDAQ_CONFIGURATION_DATA_PATH}/${XDAQ_CONFIGURATION_XML}.xml

	value=`cat ${XDAQ_CONFIGURATION_DATA_PATH}/${XDAQ_CONFIGURATION_XML}.xml`	
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t$value${Reset}"
	#re="http://(${HOSTNAME}):([0-9]+)"
	
	re="http(s*)://(.+):([0-9]+)"
	superRe="id=\"([0-9]+)\""	
	contextUidRe="ContextUID='(.+)' source"	
	
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tMATCHING REGEX${Reset}"
	
	haveXDAQContextPort=false
	insideContext=false
	ignore=false
	isLocal=false
	gatewayHostname=""
	gatewayPort=0
	contextUID=""

	####################################################################
	########### read from context config and launch Gateway ############
	####################################################################
		
	while read line; do    
		if [[ ($line == *"<!--"*) ]]; then		
			ignore=true
			
			#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t$line ${Reset}"
			#if a context comment line, extract the context UID
			if [[ ($line =~ $contextUidRe) ]]; then
				contextUID=${BASH_REMATCH[1]}
				
				#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t$contextUID ${Reset}"
			fi
		fi
		if [[ ($line == *"-->"*) ]]; then
			ignore=false
		fi
		if [[ ${ignore} == true ]]; then
			continue
		fi
		#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t$line${Reset}"
				
		if [[ ($line == *"xc:Context"*) && ($line == *"url"*) ]]; then
			if [[ ($line =~ $re) ]]; then
				#if https && hostname matches
				#   convert hostname to localhost
				#   create node config files with https:port forwarding to localhost:madeupport
				#   run nodejs
				#   run xdaq
			
				#echo ${BASH_REMATCH[1]}
				#echo ${BASH_REMATCH[2]}
			
				port=${BASH_REMATCH[3]}
				host=${BASH_REMATCH[2]}
				insideContext=true
						
				#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t$host $port ${Reset}"				
						
				if [[ (${BASH_REMATCH[2]} == ${HOSTNAME}) || (${BASH_REMATCH[2]} == ${HOSTNAME}"."*) || (${BASH_REMATCH[2]} == "localhost") ]]; then
				    isLocal=true
				else
				    isLocal=false
				fi
				if [[ ${contextHostname[*]} != ${BASH_REMATCH[2]} ]]; then
					contextHostname+=(${BASH_REMATCH[2]})
					contextPort+=(${BASH_REMATCH[3]})
					#echo ${BASH_REMATCH[1]}    
				fi
			fi
			#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t------------------------------------------ out"
	
		fi
		if [[ $line == *"/xc:Context"* ]]; then
			insideContext=false
			haveXDAQContextPort=false
			#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tin ------------------------------------------"
		fi
		if [[ ($insideContext == true) ]]; then 
			
			if [[ ($line == *"class"*) ]] && [[ "${isLocal}" == "true" ]]; then #IT'S A XDAQ SUPERVISOR		
				
				if [[ ($line == *"ots::GatewaySupervisor"*) ]]; then #IT's the SUPER supervisor, record LID 
					if [[ ($line =~ $superRe) ]]; then
					    gatewayHostname=${host}
						gatewayPort=${port}
						
						#echo ${BASH_REMATCH[1]}	#should be supervisor LID
						MAIN_URL="http://${host}:${port}/urn:xdaq-application:lid=${BASH_REMATCH[1]}/"
								
						#if gateway launch, do it
						if [[ $ISGATEWAYLAUNCH == 1 && ${host} == ${HOSTNAME} ]]; then						


							####################################################################
							########### 		launch Gateway context	 	 		############
							####################################################################
							
							#cleanup alive files
							rm ${OTSDAQ_LOG_DIR}/otsdaq_is_alive* &>/dev/null 2>&1 #hide output #remove alive file


							#attempt to avoid false starts by xdaq by detecting constructor, and relaunching
							rm ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat >/dev/null 2>&1 #hide output #remove alive file

							if [ $QUIET == 1 ]; then
								echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Green}${Bold}Launching the Gateway Application on host {${HOSTNAME}}...${Reset}"								

								if [ $BACKUPLOGS == 1 ]; then
									DATESTRING=`date +'%s'`
									echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tBacking up logfile into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-gateway-${HOSTNAME}-${port}.${DATESTRING}.txt${Reset}"
									mv ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-gateway-${HOSTNAME}-${port}.txt ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-gateway-${HOSTNAME}-${port}.${DATESTRING}.txt
								fi
								

								echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}Gateway${Reset}' output into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-gateway-${HOSTNAME}-${port}.txt${Reset}"
								ots.exe -h ${host} -p ${port} -e ${XDAQ_ARGS} &> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-gateway-${HOSTNAME}-${port}.txt &
							else
								ots.exe -h ${host} -p ${port} -e ${XDAQ_ARGS} &
							fi
							
							LAST_OTS_PID=$!

							if [ $RELAUNCHCHECK == 1 ]; then
							
								#test for relaunch
								# 4 times quietly, then get louder
								
								OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
								#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tOTS_IS_ALIVE=${OTS_IS_ALIVE}"
	
								if [ "x$OTS_IS_ALIVE" == "x" ]; then		
									sleep 1
									OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
								fi
								if [ "x$OTS_IS_ALIVE" == "x" ]; then		
									sleep 1
									OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
								fi
								if [ "x$OTS_IS_ALIVE" == "x" ]; then		
									sleep 1
									OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
								fi
								if [ "x$OTS_IS_ALIVE" == "x" ]; then		
									sleep 1
									OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
								fi
									
								while [ "x$OTS_IS_ALIVE" == "x" ]; do
									echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tCould not verify successful ots gateway context launch, relaunching ots gateway context..."									
									killproc ${LAST_OTS_PID} 
									sleep 2
									
									if [ $QUIET == 1 ]; then
										echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}Gateway${Reset}' output into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-gateway-${HOSTNAME}-${port}.txt${Reset}"
										echo -e "\n\nAttempting restart\n\n" >> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-gateway-${HOSTNAME}-${port}.txt
										ots.exe -h ${host} -p ${port} -e ${XDAQ_ARGS} &>> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-gateway-${HOSTNAME}-${port}.txt &
									else
										ots.exe -h ${host} -p ${port} -e ${XDAQ_ARGS} &
									fi
									LAST_OTS_PID=$!
									
									#verify relaunch
									sleep 8 #give time before relaunch test
									OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat)"
									
								done
								
								echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tVerified successful ots gateway context ${HOSTNAME}-${port} launch..."
							fi
							
							GATEWAY_PID=$LAST_OTS_PID													
							echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tGateway-PID = ${Blue}${Bold}${GATEWAY_PID}${Rev}${Reset}"
							echo
							
							####################################################################
							########### 		end launch Gateway context	 		############
							####################################################################
														
						fi
					fi
				elif [[ ($haveXDAQContextPort == false) && ($gatewayHostname != $host || $gatewayPort != $port) ]]; then 
					xdaqPort+=($port)
					xdaqHost+=($host)	
					xdaqContextUID+=($contextUID)				
					haveXDAQContextPort=true
				fi
				
			  #IF THERE IS AT LEAST ONE NOT ARTDAQ APP THEN I CAN GET OUT OF THIS CONTEXT AND RUN XDAQ ONCE JUST FOR THIS
			  #insideContext=false #RAR commented because need Super Supervisor connection LID for URL
			  #echo $line          
			fi
		fi   
	done < ${XDAQ_CONFIGURATION_DATA_PATH}/${XDAQ_CONFIGURATION_XML}.xml
		

	####################################################################
	########### 		launch non-Gateway contexts 		############
	####################################################################
		
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Green}${Bold}Launching all otsdaq Applications for host {${HOSTNAME}}...${Reset}"
	i=0	
	for port in "${xdaqPort[@]}"
	do
	  : 
	  	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tots.exe -h ${xdaqHost[$i]} -p ${port} -e ${XDAQ_ARGS} &"
		#echo
		  

		if [[ ${xdaqHost[$i]} != ${HOSTNAME} ]]; then
			#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tskipping context no on this host -h ${xdaqHost[$i]} -p ${port} -e ${XDAQ_ARGS} &"
			i=$(( $i + 1 ))
			continue
		fi

		#attempt to avoid false starts by xdaq by detecting constructor, and relaunching
		rm ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat >/dev/null 2>&1 #hide output #remove alive file
							
		if [ $QUIET == 1 ]; then		  

			if [ $BACKUPLOGS == 1 ]; then
				DATESTRING=`date +'%s'`				
				
				echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tBacking up logfile to ${Yellow}${Bold}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-${HOSTNAME}-${port}.${DATESTRING}.txt${Reset}"				
				mv ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-${HOSTNAME}-${port}.txt ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-${HOSTNAME}-${port}.${DATESTRING}.txt
			fi
		  			
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}${xdaqContextUID[$i]}${Reset}' output into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-${HOSTNAME}-${port}.txt${Reset}"			
			ots.exe -h ${xdaqHost[$i]} -p ${port} -e ${XDAQ_ARGS} &> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-${HOSTNAME}-${port}.txt &
		else
			ots.exe -h ${xdaqHost[$i]} -p ${port} -e ${XDAQ_ARGS} &
		fi
		
		LAST_OTS_PID=$!
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tNongateway-PID = ${Blue}${Bold}${LAST_OTS_PID}${Rev}${Reset}"
		
		TempContextPIDArray+=($LAST_OTS_PID)
		ContextPIDArray+=($LAST_OTS_PID)
		
		i=$(( $i + 1 ))
	done
	

	if [ $RELAUNCHCHECK == 1 ]; then
		
		####################################################################
		###########  test for relaunch of non-Gateway contexts	############
		####################################################################	
		
		sleep 1 #give time before relaunch test
		
		unset ContextPIDArray #reset  
		i=0
		j=0
		for port in "${xdaqPort[@]}"
		do
		  : 
			#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tots.exe -h ${xdaqHost[$i]} -p ${port} -e ${XDAQ_ARGS} &"
			echo
				  
			if [[ ${xdaqHost[$i]} != ${HOSTNAME} ]]; then
				#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tskipping context no on this host -h ${xdaqHost[$i]} -p ${port} -e ${XDAQ_ARGS} &"
				i=$(( $i + 1 ))
				continue
			fi
			
			LAST_OTS_PID=${TempContextPIDArray[$j]}
			
			#test for relaunch
			# 4 times quietly, then get louder
		
			
			OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
			#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tOTS_IS_ALIVE=${OTS_IS_ALIVE}"
			
			
			if [ "x$OTS_IS_ALIVE" == "x" ]; then	
				sleep 1
				OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
			fi
			if [ "x$OTS_IS_ALIVE" == "x" ]; then	
				sleep 1
				OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
			fi
			if [ "x$OTS_IS_ALIVE" == "x" ]; then	
				sleep 1
				OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
			fi
			if [ "x$OTS_IS_ALIVE" == "x" ]; then	
				sleep 1
				OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat 2>/dev/null)"  #hide error output
			fi
		
			 
			while [ "x$OTS_IS_ALIVE" == "x" ]; do
				echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tCould not verify successful ots non-gateway context launch, relaunching non-gateway context..."
				killproc ${LAST_OTS_PID} 
				sleep 2
				
				if [ $QUIET == 1 ]; then
					echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}${xdaqContextUID[$i]}${Reset}' output into ${Yellow}${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-${HOSTNAME}-${port}.txt${Reset}"
					echo -e "\n\nAttempting restart\n\n" >> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-${HOSTNAME}-${port}.txt
					ots.exe -h ${xdaqHost[$i]} -p ${port} -e ${XDAQ_ARGS} &>> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-${HOSTNAME}-${port}.txt &
				else
					ots.exe -h ${xdaqHost[$i]} -p ${port} -e ${XDAQ_ARGS} &
				fi
				LAST_OTS_PID=$!
				echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tNongateway-PID = ${Blue}${Bold}${LAST_OTS_PID}${Rev}${Reset}"
				
				#test for relaunch
				sleep 8 #give time before relaunch test
				OTS_IS_ALIVE="$(cat ${OTSDAQ_LOG_DIR}/otsdaq_is_alive-${HOSTNAME}-${port}.dat)"
				
			done 		
			
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tVerified successful ots non-gateway context ${HOSTNAME}-${port} launch..."
			#add successful launch to Context PID array	
			ContextPIDArray+=($LAST_OTS_PID)
			#ContextPIDArray+=(${TempContextPIDArray[$j]})
			
			
			i=$(( $i + 1 ))
			j=$(( $j + 1 ))
		done #end test for relaunch loop
		####################################################################
		
	fi
	
	
	
	

	FIRST_TIME=0 #used to supress printouts
		
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tNote: This host is ${HOSTNAME}."
	if [[ (${#xdaqPort[@]} == 0) && "x${gatewayHostname}" != "x" ]]; then #${#contextHostname[@]} == 1 ]]; then 
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tThis is the ONLY host configured to run ots applications: ${contextHostname[@]}"
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tThis is the corresponding port for the ots application: ${contextPort[@]}"
	  else
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tThese are the hosts configured to run ots applications: ${gatewayHostname} ${xdaqHost[@]}"
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tThese are the corresponding ports for the applications: ${gatewayPort} ${xdaqPort[@]}"
	fi
	echo
	  
	if [[ (${#xdaqPort[@]} == 0) && $gatewayHostname != ${HOSTNAME} ]]; then
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Yellow}${Bold}************************************************************************************${Reset}"
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Yellow}${Bold}************************************************************************************${Reset}"
		
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}${Blink}WARNING${Reset}: There are no configured processes for hostname ${HOSTNAME}." 
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tAre you sure your configuration is written for ${Red}${Bold}${Blink}${HOSTNAME}${Reset}?" 
		echo
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tThese are the hosts configured to run ots applications: ${gatewayHostname} ${xdaqHost[@]}"
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tThese are the corresponding ports for the applications: ${gatewayPort} ${xdaqPort[@]}"
		echo
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tYou can change the configuration for ${HOSTNAME} in wiz mode by..."
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\tGoing to the Configure App   -> click 'Tree-View' next to Active-Context"
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\t-> expand 'XDAQContextTable' -> change 'Address' to set desired host name."
		
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Yellow}${Bold}************************************************************************************${Reset}"
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Yellow}${Bold}************************************************************************************${Reset}"
		
	elif [[ $ISGATEWAYLAUNCH == 1 ]]; then
		printMainURL &	
	fi
	
	
}   #end launchOTS
export -f launchOTS


#########################################################
#########################################################
#make URL print out a function so that & syntax can be used to run in background (user has immediate terminal access)
printMainURL() {	
	
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tprintMainURL()"
	
	#check if ots was aborted
	#OTSDAQ_STARTOTS_ACTION="$(cat ${OTSDAQ_STARTOTS_ACTION_FILE})"
	#	if [ "$OTSDAQ_STARTOTS_ACTION" == "EXIT_LOOP" ]; then
	#		exit
	#	fi
	
	if [ $QUIET == 0 ]; then
		sleep 5 #give a little more time before injecting printouts in scrolling printouts
	else
		sleep 3 #give a little time for other StartOTS printouts to occur (so this one is last)  
	fi
	
	echo
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tOpen the URL below in your Google Chrome or Mozilla Firefox web browser:"	
	echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t\t(Note: This URL may need to be modified by the user depending on their network configuration)"

	if [ $MAIN_URL == "unknown_url" ]; then
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tINFO: No gateway supervisor found for node {${HOSTNAME}}.${Reset}"
		exit
	fi
	
	for i in {1..5}
	do
		#check if ots was aborted
		#OTSDAQ_STARTOTS_ACTION="$(cat ${OTSDAQ_STARTOTS_ACTION_FILE})"
		#if [ "$OTSDAQ_STARTOTS_ACTION" == "EXIT_LOOP" ]; then
		#exit
		#fi		
		
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Green}${Bold}${EUNDERLINE}${MAIN_URL}${Reset}"

		echo -e "${Reset}"
		
		if [ $QUIET == 1 ]; then
			exit
		fi
		sleep 2 #for delay between each printout
	done
}  #end printMainURL
export -f printMainURL
	
#########################################################
#########################################################
otsActionHandler() {

    echo		
	#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tStarting action handler...${Reset}"

	#clear file initially
	echo "0" > $OTSDAQ_STARTOTS_ACTION_FILE
	echo "0" > $OTSDAQ_STARTOTS_LOCAL_QUIT_FILE 
	

	if [[ ($ISCONFIG == 1) || ("${HOSTNAME}" == "${gatewayHostname}") ]]; then
		echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tThe script, on ${HOSTNAME}, is the gateway ots script, so it will drive the exit of ots scripts running on other hosts."
		

		echo "EXIT_LOOP" > $OTSDAQ_STARTOTS_QUIT_FILE
		echo "EXIT_LOOP ${STARTTIME}-${LINENO}-${HOSTNAME_ARR[0]}" > $OTSDAQ_STARTOTS_LOCAL_QUIT_FILE
		
		#time for other stale StartOTS to quit
		sleep 5
		echo "0" > $OTSDAQ_STARTOTS_QUIT_FILE
		echo "0" > $OTSDAQ_STARTOTS_LOCAL_QUIT_FILE
	else
		sleep 10 #non masters sleep for a while, to give time to quit stale scripts
	fi	
		
	FIRST_TIME=1 #to enable url printouts
	
	
	
	#listen for file commands
	while true; do
		#In OTSDAQ_STARTOTS_ACTION_FILE
		#0 is the default. No action is taken
		#REBUILD_OTS will rebuild otsdaq
		#Reset_MPI will reboot artdaq MPI runs
		#EXIT_LOOP will exit StartOTS loop
		#if cmd file is missing, exit StartOTS loop
		
		OTSDAQ_STARTOTS_ACTION="$(cat ${OTSDAQ_STARTOTS_ACTION_FILE})"
		OTSDAQ_STARTOTS_QUIT="$(cat ${OTSDAQ_STARTOTS_QUIT_FILE})"
		OTSDAQ_STARTOTS_LOCAL_QUIT="$(cat ${OTSDAQ_STARTOTS_LOCAL_QUIT_FILE})"
		
		echo "0" > $OTSDAQ_STARTOTS_ACTION_FILE #clear the command in the file; it has been responded to
				
		#echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t command ${OTSDAQ_STARTOTS_ACTION} ${OTSDAQ_STARTOTS_QUIT} ${OTSDAQ_STARTOTS_LOCAL_QUIT} "
		
		if [ "$OTSDAQ_STARTOTS_ACTION" == "REBUILD_OTS" ]; then
		
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t "
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tRebuilding..."
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t "			
			#echo "1" > mrbresult.num; mrb b > otsdaq_startots_mrbreport.txt && echo "0" > mrbresult.num			
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t "
			#grep -A 1 -B 1 "INFO: Stage build successful." otsdaq_startots_mrbreport.txt
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t "
			sleep 5
		
		elif [ "$OTSDAQ_STARTOTS_ACTION" == "OTS_APP_SHUTDOWN" ]; then
		
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t "
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tShutting down non-gateway contexts..."
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t "	
			
			#kill all non-Gateway context processes
			killprocs nongateway
			
			
		elif [ "$OTSDAQ_STARTOTS_ACTION" == "OTS_APP_STARTUP" ]; then
		
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t "
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tStarting up non-gateway contexts..."
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t "	
			
			launchOTS nongateway #launch all non-gateway apps			
	
		elif [ "$OTSDAQ_STARTOTS_ACTION" == "LAUNCH_WIZ" ]; then
			
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tStarting otsdaq Wiz mode for host {${HOSTNAME}}..."
			echo
			killprocs
			
			launchOTSWiz
			
			sleep 3 #so that the terminal comes back after the printouts in quiet mode
			
			FIRST_TIME=1 #re-enable printouts for launch ots, in case of context changes

		elif [ "$OTSDAQ_STARTOTS_ACTION" == "LAUNCH_OTS" ]; then
				
			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tStarting otsdaq in normal mode for host {${HOSTNAME}}..."
			echo
			killprocs
			
			launchOTS

			sleep 3 #so that the terminal comes back after the printouts in quiet mode			

		elif [ "$OTSDAQ_STARTOTS_ACTION" == "FLATTEN_TO_SYSTEM_ALIASES" ]; then

			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tRemoving unused tables and groups based on active System Aliases..."
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\totsdaq_flatten_system_aliases 0"
			echo	
			echo 
			if [ $QUIET == 1 ]; then			

				if [ $BACKUPLOGS == 1 ]; then
					DATESTRING=`date +'%s'`
					echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t     Backing up logfile to *** ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-flatten-${HOSTNAME}.${DATESTRING}.txt ***"
					mv ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-flatten-${HOSTNAME}.txt ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-flatten-${HOSTNAME}.${DATESTRING}.txt
				fi
				
				echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\t${Red}${Bold}Quiet mode${Reset}. '${Bold}Flattening${Reset}' output into ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-flatten-${HOSTNAME}.txt ***  "	
				otsdaq_flatten_system_aliases 0 &> ${OTSDAQ_LOG_DIR}/otsdaq_quiet_run-flatten-${HOSTNAME}.txt &
			else
				otsdaq_flatten_system_aliases 0 &
			fi		
						
		elif [[ "$OTSDAQ_STARTOTS_ACTION" == "EXIT_LOOP" || "$OTSDAQ_STARTOTS_QUIT" == "EXIT_LOOP" || "$OTSDAQ_STARTOTS_LOCAL_QUIT" == "EXIT_LOOP" ]]; then

			echo
			echo -e "${Reset}${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tExit of (stale) ots..." 
			# Action:${OTSDAQ_STARTOTS_ACTION}-Quit:${OTSDAQ_STARTOTS_QUIT}-Local:${OTSDAQ_STARTOTS_LOCAL_QUIT}"
			if [[ ($ISCONFIG == 1) || ("${HOSTNAME}" == "${gatewayHostname}") ]]; then
				echo "EXIT_LOOP" > $OTSDAQ_STARTOTS_QUIT_FILE
				echo "EXIT_LOOP ${STARTTIME}-${LINENO}-${HOSTNAME_ARR[0]}" > $OTSDAQ_STARTOTS_LOCAL_QUIT_FILE
			fi
			
			echo -e "${Reset}"
			echo -e "${Reset}"
		    exit
			
		elif [[ "${OTSDAQ_STARTOTS_ACTION:-"0"}" != "0"  || "${OTSDAQ_STARTOTS_QUIT:-"0"}" != "0" || "${OTSDAQ_STARTOTS_LOCAL_QUIT:-"0"}" != "0" ]]; then
		
			echo -e "${STARTTIME}-"`date +"%h%y.%T"` "${HOSTNAME_ARR[0]}-ots [${Cyan}${LINENO}${Reset}]\tExiting ots.. Unrecognized command !=0 in Action:${OTSDAQ_STARTOTS_ACTION}-Quit:${OTSDAQ_STARTOTS_QUIT}-Local:${OTSDAQ_STARTOTS_LOCAL_QUIT}"			
			
			echo -e "${Reset}"
			echo -e "${Reset}"
			exit
			
		fi
				
		sleep 1
	done

		
} #end otsActionHandler
export -f otsActionHandler



#functions have been declared
#now launch things



if [ $ISMACROMAKER == 1 ]; then
	launchOTSMacromaker $1 $2 $3
	exit
elif [ $ISCONFIG == 1 ]; then
	launchOTSWiz
else
	launchOTS  #only launch gateway once.. on shutdown and startup others can relaunch
fi


sleep 2 #attempt to avoid false starts by xdaq 
#after gateway node has been decided and xdaq has been launched, start action handler
otsActionHandler &


#launch chrome here if enabled
if [ $CHROME == 1 ]; then
	sleep 3 #give time for server to be live
	google-chrome $MAIN_URL &
fi

#launch firefox here if enabled
if [ $FIREFOX == 1 ]; then
	sleep 3 #give time for server to be live
	firefox $MAIN_URL &
fi

sleep 3 #so that the terminal comes back after the printouts are done ( in quiet mode )

echo -e "${Reset}"
echo -e "${Reset}"









