#include "otsdaq-core/ConfigurationInterface/JSONConfigurationHandler.h"
#include "otsdaq-core/ConfigurationInterface/TimeFormatter.h"

#include "otsdaq-core/ConfigurationDataFormats/ConfigurationBase.h"

#include <stdexcept>
#include <iostream>
#include <sstream>
#include <sys/types.h>

#include <sys/stat.h>
#include <errno.h>

#include "otsdaq-core/JSONParser/xml2json.hpp"
#include "otsdaq-core/JSONParser/Json.h"
#include "otsdaq-core/JSONParser/JsonReader.h"

using namespace ots;


//==============================================================================
JSONConfigurationHandler::JSONConfigurationHandler(void)
{}

//==============================================================================
JSONConfigurationHandler::~JSONConfigurationHandler(void)
{}

// std::string JSONConfigurationHandler::XMLToJSON(std::string fileName)
// {

//   std::ifstream input(JSONFilename);
//   std::ostringstream oss;

//   oss << input.rdbuf();
//   input.close();
  
//   std::string xmlString = oss.string();
//   const auto json_string = xml2json(oss.c_str());
  
// }
//==============================================================================
std::string JSONConfigurationHandler::XMLFileToJSON(std::string fileName)
{
	std::ifstream input(fileName);
	std::ostringstream oss;

	oss << input.rdbuf();
	std::string xml_string = oss.str();
	const auto json_string = xml2json(xml_string.c_str());
	input.close();
	return json_string;
}
//==============================================================================
std::string JSONConfigurationHandler::XMLStringToJSON(std::string xmlString)
{
	const auto json_string = xml2json(xmlString.c_str());
	return json_string;
}

//==============================================================================
void JSONConfigurationHandler::readJSON(ConfigurationBase& configuration, unsigned int version, Json& json)
{
	std::string filename = getXMLFileName(configuration,configuration.getViewVersion());
	std::string JSONFilename = getJSONFileName(configuration,configuration.getViewVersion());

	std::ifstream input(JSONFilename);
	std::ostringstream oss;

	oss << input.rdbuf();
	input.close();
	std::string json_string = oss.str();
	JsonReader json_reader;
	if(json_reader.parse(json_string,json))
		return;
	else
	{
		std::cout << __COUT_HDR_FL__ << "ERROR PARSING JSON FILE " << JSONFilename << std::endl;
		assert(0);
	}
}

//==============================================================================
void JSONConfigurationHandler::readJSON(ConfigurationBase* configuration, unsigned int version, Json* json)
{
	readJSON(*configuration,version, *json);
}

//==============================================================================
std::string JSONConfigurationHandler::writeJSON(const ConfigurationBase& configuration)
{

	// /some/path/#/filename_v#.xml
	std::string filename = getXMLFileName(configuration,configuration.getViewVersion());
	// /some/path/#/filename_v#.json
	std::string JSONFilename = getJSONFileName(configuration,configuration.getViewVersion());

	std::ifstream input(filename);
	std::ofstream output(JSONFilename);
	std::ostringstream oss;

	oss << input.rdbuf();
	std::string xml_string = oss.str();
	const auto json_string = xml2json(xml_string.c_str());
	input.close();
	output << json_string;
	output.close();

	//fixme/todo: can use this to make the output json more easily readable
	//	std::string formatJSONCommand = "python -m json.tool" + JSONFilename + ">" + JSONFilename + "_pretty";
	//	std::system(formatJSONCommand.c_str());
	//

	return filename;
}

//==============================================================================
//returns a simple JSON string based on row/col table
std::string JSONConfigurationHandler::getSimpleJSON(const ConfigurationBase* configuration)
{
	std::stringstream out;
	configuration->getView().printJSON(out);
	return out.str();
}


//==============================================================================
std::string JSONConfigurationHandler::writeJSON(const ConfigurationBase* configuration)
{
	return writeJSON(*configuration);
}

//==============================================================================
std::string JSONConfigurationHandler::getXMLFileName(const ConfigurationBase& configuration, unsigned int version)
{
	std::stringstream fileName;
	fileName << getXMLDir(&configuration)
    		<< version << '/'
			<< configuration.getConfigurationName() << "_v" << version << ".xml";
	return fileName.str();

}
//==============================================================================
std::string JSONConfigurationHandler::getJSONFileName(const ConfigurationBase& configuration, unsigned int version)
{
	std::stringstream fileName;
	fileName << getXMLDir(&configuration)
    		<< version << '/'
			<< configuration.getConfigurationName() << "_v" << version << ".json";
	return fileName.str();

}

//==============================================================================
std::string JSONConfigurationHandler::getXMLDir(const ConfigurationBase* configuration)
{
	return std::string(getenv("CONFIGURATION_DATA_PATH")) + '/' + configuration->getConfigurationName() + '/';
}
